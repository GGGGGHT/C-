//
// Created by Admin on 2021/10/27.
//
#include <iostream>
#include "dynamicMemory.h"

/**
 * 动态内存与智能指针
 * C++支持动态分配对象.动态分配的对象的生存其与它们在哪里创建是无关的,只有当显式地被释放时,这些对象才会销毁
 * 标准库中定义了两个智能指针类型来管理动态分配的对象,当一个对象应该被释放时,指向它的智能指针可以确保自动地释放它.
 *
 * 静态内存用来保存局部static对象,类static数据成员以及定义在任何函数之外的变量.
 * 栈内存用来保存定义在函数内的非static对象.
 * 分配在静态或栈内存中的对象由编译器自动创建和销毁
 * 栈对象,公在其定义的程序块运行时才存在
 * static对象在使用之前分配,在程序结束时销毁
 * @return
 */


/**
 * 在C++中,动态内存的管理是通过一对运算符来完成
 * new: 在动态内存中为对象分配空间并返回一个指向该对象的指针
 * delete: 接受一个动态对象的指针,销毁该对象,并释放与之关联的内存.
 *
 * 智能指针:
 * 智能指针的行为类似常规指针,重要的区别是它负责自动释放所指向的对象.
 * shared_ptr 允许多个指针指向同一个对象
 * unique_ptr 独占所指向的对象
 * weak_ptr 弱引用,指向shared_ptr所管理的对象.
 */

int main() {
	using namespace std;

	cout << "hello";
}
